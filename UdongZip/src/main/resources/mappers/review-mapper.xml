<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="reviewMapper">

	<resultMap id="reviewResultSet" type="review">
		<result column="REVIEW_NO" property="reviewNo"/>
		<result column="MEMBER_NO" property="memberNo"/>
		<result column="AGENT_NO" property="agentNo"/>
		<result column="RESERVATION_NO" property="reservationNo"/>
		<result column="CONTENT" property="content"/>
		<result column="SATISFIED" property="satisfied"/>
		<result column="CREATE_DATE" property="createDate"/>
		<result column="STATUS" property="status"/>
		<result column="MEMBER_ID" property="memberId"/>
		<result column="RESULT" property="result"/>
		<result column="MEMBER_NAME" property="memberName" />
  		<result column="AGENT_NAME" property="agentName" />
	</resultMap>
	
	<resultMap id="requestResultSet" type="removeRequest">
		<result column="REQUEST_NO" property="requestNo" />
		<result column="AGENT_NO" property="agentNo" />
		<result column="REVIEW_NO" property="reviewNo" />
		<result column="REASON" property="reason" />
		<result column="REQUEST_DATE" property="requestDate" />
		<result column="RESULT" property="result" />
		<result column="AGENT_NAME" property="agentName" />
		<result column="MEMBER_ID" property="memberId" />
		<result column="SATISFIED" property="satisfied" />
		<result column="CREATE_DATE" property="createDate" />
	</resultMap>

	<select id="selectAgentReviewList" parameterType="_int" resultMap="reviewResultSet">
		SELECT R1.*, NVL(RESULT, 'null') RESULT
		  FROM (SELECT REVIEW_NO, CONTENT, SATISFIED, CREATE_DATE, R.STATUS, MEMBER_ID
	    		  FROM REVIEW R, MEMBER M
	   			 WHERE R.MEMBER_NO = M.MEMBER_NO
	   			   AND AGENT_NO = #{agentNo}
	     		   AND R.STATUS = 'Y') R1
		  LEFT JOIN REMOVE_REQUEST RQ ON R1.REVIEW_NO = RQ.REVIEW_NO
		  ORDER BY R1.REVIEW_NO DESC
	</select>
	
	<insert id="insertRequest" parameterType="removeRequest">
		INSERT INTO REMOVE_REQUEST(REQUEST_NO, AGENT_NO, REVIEW_NO, REASON)
		VALUES(SEQ_REQ.NEXTVAL, #{agentNo}, #{reviewNo}, #{reason})
	</insert>
	
	<!-- 리뷰 전체 조회 : 개인 회원 -->
	<select id="agentSelectReviewList" parameterType="member" resultMap="reviewResultSet">
		SELECT *
		FROM REVIEW R, MEMBER M
		WHERE R.MEMBER_NO = M.MEMBER_NO
		  AND R.STATUS = 'Y'
		  <choose>
		  	<when test="identifier == 'member'">
		  		AND R.MEMBER_NO = #{memberNo}
		  	</when>
		  	<when test="identifier == 'agent'">
		  		AND R.AGENT_NO = #{memberNo}
		  	</when>
		  </choose>
		ORDER BY REVIEW_NO DESC
	</select>
	
	<!-- 리뷰 삭제 요청 전체 조회 수 : 어드민 -->
	<select id="selectReuqestListCount" parameterType="hashmap" resultType="_int">
		SELECT COUNT(*)
		FROM REMOVE_REQUEST R, AGENT A, REVIEW RV, MEMBER M
		WHERE R.AGENT_NO = A.AGENT_NO
		AND R.REVIEW_NO = RV.REVIEW_NO
		AND RV.MEMBER_NO = M.MEMBER_NO
		<!-- 처리전(대기) -->
		<if test="classification == 'result'">
			AND RESULT = 'D'
		</if>
		<!-- 키워드 검색 -->
		<if test="classification == 'keyword'">
			AND UPPER(AGENT_NAME) LIKE '%' || UPPER(#{keyword}) || '%'
		</if>
	</select>
	
	<!-- 리뷰 삭제 요청 전체 조회 : 어드민 -->
	<select id="selectRequestList" parameterType="hashmap" resultMap="requestResultSet">
		SELECT *
		FROM REMOVE_REQUEST R, AGENT A, REVIEW RV, MEMBER M
		WHERE R.AGENT_NO = A.AGENT_NO
		AND R.REVIEW_NO = RV.REVIEW_NO
		AND RV.MEMBER_NO = M.MEMBER_NO
		<!-- 처리전(대기) -->
		<if test="classification == 'result'">
			AND RESULT = 'D'
		</if>
		<!-- 키워드 검색 -->
		<if test="classification == 'keyword'">
			AND UPPER(AGENT_NAME) LIKE '%' || UPPER(#{keyword}) || '%'
		</if>
		ORDER BY REQUEST_NO
	</select>
	
	<!-- 리뷰 삭제 요청 상세 조회 : 어드민 -->
	<select id="selectRequest" parameterType="_int" resultMap="requestResultSet">
		SELECT *
		FROM REMOVE_REQUEST R, AGENT A, REVIEW RV, MEMBER M
		WHERE R.AGENT_NO = A.AGENT_NO
		AND R.REVIEW_NO = RV.REVIEW_NO
		AND RV.MEMBER_NO = M.MEMBER_NO
		AND R.REQUEST_NO = #{requestNo}
	</select>
	
	<!-- 리뷰 삭제 : 개인 회원, 어드민 -->
	<update id="deleteReview" parameterType="_int">
		UPDATE REVIEW
		SET STATUS = 'N'
		WHERE REVIEW_NO = #{reviewNo}
	</update>
	
	<!-- 삭제 요청 상태 변경 (반려, 삭제) : 어드민 -->
	<update id="updateRequest" parameterType="removeRequest">
		UPDATE REMOVE_REQUEST
		SET
		<choose>
			<when test="result == 'delete'">
				RESULT = 'Y'
			</when>
			<otherwise>
				RESULT = 'N'
			</otherwise>
		</choose>
		WHERE REQUEST_NO = #{requestNo}
	</update>
  	
  	<!-- 페이징 처리 -->
  	<select id="selectListCount" resultType="_int" parameterType="member">
  		SELECT COUNT(*)
		  FROM REVIEW
		 WHERE STATUS = 'Y'
		 <choose>
            <when test="identifier == 'member'">
                AND MEMBER_NO = #{memberNo}
            </when>
            <when test="identifier == 'agent'">
                AND AGENT_NO = #{memberNo}
            </when>
        </choose>
  	</select>
  	
  	<!-- 리뷰 리스트 -->
  	 <select id="selectList" parameterType="member" resultMap="reviewResultSet">
        SELECT R.REVIEW_NO, R.CONTENT, M.MEMBER_NAME, A.AGENT_NAME, TO_CHAR(R.CREATE_DATE, 'YYYY-MM-DD') "CREATE_DATE"
        FROM REVIEW R, MEMBER M, AGENT A
        WHERE R.MEMBER_NO = M.MEMBER_NO
          AND R.AGENT_NO = A.AGENT_NO
          AND R.STATUS = 'Y'
          AND R.MEMBER_NO = #{memberNo}
        ORDER BY CREATE_DATE DESC
  	</select>
  	
  	<!-- 리뷰 상세보기 -->
 
  	<select id="selectReview" parameterType="_int" resultMap="reviewResultSet">
	  	SELECT REVIEW_NO, RESERVATION_NO, AGENT_NAME, CONTENT, SATISFIED
	      FROM REVIEW R, AGENT A
	   	 WHERE REVIEW_NO = #{reviewNo}
		   AND R.AGENT_NO = A.AGENT_NO
	</select>	
	
	<!-- 리뷰 작성 -->
	<insert id="insertReview" parameterType="review">
		INSERT INTO REVIEW(REVIEW_NO,
						   MEMBER_NO,
					       RESERVATION_NO,
					       AGENT_NO, 
					       CONTENT, 
					       SATISFIED)
	    VALUES(SEQ_REV.NEXTVAL
	    	   , #{memberNo}
	           , #{reservationNo}
	           , #{agentNo}
	           , #{content}
	           , #{satisfied})
	</insert>
		
</mapper>
